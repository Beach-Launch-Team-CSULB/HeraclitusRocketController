// This file was generated by ChatGPT-4 
// Please ask Mark for the chat history if needed. 
// Modifications are encouraged, beep boops. Robots are dumb.  

#ifndef SENSOR_H
#define SENSOR_H

#include <string>

// Sensor class definition
class Sensor {
protected:
    int labelID;
    int pinID;
    int pinDigital;
    int pinPWM;
    std::string unit;
    float rangeMin;
    float rangeMax;
    float calibrationOffset;
    float value;

public:
    // Constructor with default calibrationOffset parameter
    Sensor(int label, int pinID, int pinDigital, int pinPWM, std::string unit, 
           float rangeMin, float rangeMax, float calibrationOffset = 0.0f);

    // Virtual destructor for proper cleanup of derived types
    virtual ~Sensor() {}

    // Pure virtual functions for sensor data operations
    virtual float readData() = 0;
    virtual int writeData(float data) = 0;

    // Accessors and mutators
    float getMin() const { return rangeMin; }
    float getMax() const { return rangeMax; }
    std::string getUnit() const { return unit; }
    float getValue() const { return value; }
    
    // Method to update sensor value - could be the same as readData in implementation
    virtual void updateValue(float newValue) { value = newValue; }
    
    // Method to set calibration offset
    void setCalibrationOffset(float newOffset) { calibrationOffset = newOffset; }
};

#endif // SENSOR_H
